namespace App;

use Runtime.Interfaces.AssetsInterface;
use Runtime.Interfaces.ModuleDescriptionInterface;
use Runtime.Core.Context;
use Runtime.Core.Driver;
use Runtime.Core.Entity;
use Runtime.Core.LambdaChain;
use Runtime.Web.Layout;
use Runtime.Web.LayoutModel;
use Runtime.Web.RenderController;
use Runtime.Web.RenderDriver;
use Runtime.Web.RouteController;
use App.AppLayout;
use App.IndexPage;
use App.IndexPageModel;
use App.Routes;


class ModuleDescription implements ModuleDescriptionInterface, AssetsInterface
{
	
	/**
	 * Returns module name
	 * @return string
	 */
	pure string getModuleName() => "App";
	
	
	
	/**
	 * Returns module name
	 * @return string
	 */
	pure string getModuleVersion() => "0.0.1";
	
	
	
	/**
	 * Returns required modules
	 * @return Map<string>
	 */
	pure Map<string> requiredModules() => 
	{
		"Runtime.Web": "*",
		
		/* Backend */
		#ifdef BACKEND then
		'Runtime.Web.Backend': '*',
		#endif
	};
	
	
	
	/**
	 * Returns module files load order
	 * @return Collection<string>
	 */
	pure Collection<string> assets() => 
	[
	];
	
	
	
	/**
	 * Returns enities
	 */
	pure Collection<Dict> entities() => 
	[
		/* Register RenderController */
		new Driver
		{
			"name": "root-controller",
			"value": classof RenderController,
			"params":
			{
				"selector": ".root",
				"main_controller": true,
				"window": "RootController",
			}
		},
		
		/* Layout chain */
		new LambdaChain
		{
			"name": RenderDriver::LAYOUT_CHAIN,
			"pos": 10,
			"value": "App.Routes::chainLayoutModel",
		},
		
		/* Render Chain. Page not found */
		new LambdaChain
		{
			"name": RenderDriver::RENDER_CHAIN,
			"value": "App.Routes::Page404",
			"pos": RenderDriver::RENDER_CHAIN_CALL_PAGE_NOT_FOUND,
			"is_async": true,
		},
		
		/* Register routes */
		new Entity{ "value": classof Routes },
	];
	
	
	
	/**
	 * Returns sync loaded files
	 */		
	public static Collection<string> resources() => null;	
	
	
	
	
	#ifdef FRONTEND then
	
	/**
	 * Returns context settings
	 * @return Dict<string>
	 */
	pure Dict<string> appSettings(Dict env) => 
	{
		"config":
		{
			"Runtime.Web":
			{
				"route_prefix": "",
				"f_inc": 1,
			},
		},
		"secrets":
		{
		},
		"providers":
		{
		}
	};
	
	
	
	/**
	 * Init app
	 */
	static Context appInit(Context c)
	{
		return c::init(c);
	}
	
	
	
	/**
	 * Start app
	 */
	static async Context appStart(Context c)
	{
		return await c::start(c);
	}
	
	
	
	/**
	 * Run app
	 */
	static async void appRun()
	{
		RenderController controller = @.getDriver(classof RouteController);
		await controller.renderCurrentPage();
	}
	
	
	#endif
	
}